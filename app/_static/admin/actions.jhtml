<?	
if (args.req.query.cgi == "1") {
	var appRoot = require ('app-root-path');
	var actions = require (appRoot + '/modules/actions');
	var res = args.res;
	var req = args.req;

	var json = {};


	try {
		var save = true;
		debug ("actions.jhtml service: " + JSON.stringify(req.body));
		switch (req.body.command) {
			case "listactions":
				json = actions.listActions(); //["one", "two", "three"];
				save = false;
				break;

			case "get1action":
				json.name = req.body.args;
				var act = actions.get1Action (json.name); //"/samplepath";
				json.path = act.path;
				json.script = act.script;
				save = false;
				break;

			case "set1action":
				json.name = req.body.args.name;
				json.path = req.body.args.path;
				json.script = req.body.args.script;
				actions.set1Action (json.name, json.path, json.script);
				break;

			case "delete1action":
				json.name = req.body.args;
				actions.delete1Action (json.name);
				break;

			default:
				break;
		}
		if (save) {
			actions.SaveActions();
		}
	}
	catch (err) {
		debug ("actions.jhtml service err: " + err)
	}

	var data = {
			"command" : req.body.command,
			"args" : json
		};
	
	res.setHeader ("Content-Type", "application/json");
	res.writeHead (200);
	res.end (JSON.stringify (data));

	results = {"handled" : true}; //inform the server we handled the full request
	args.skipHTML = true;
}
"";
?>

<html>
    <head>
		<script>
			var isElectron = true;
			try {
				window.nodeRequire = require;
				delete window.require;
				delete window.exports;
				delete window.module;
			}
			catch (e) {
				isElectron = false;
			}
		</script>
		<meta name="viewport" content="width=device-width, initial-scale=1">
		<link rel="stylesheet" href="../lib/fontawesome/css/font-awesome.min.css">
		<script src="../lib/jquery/dist/jquery.js"></script>
		<link rel="stylesheet" href="<%
										var css="";
											var theme = context.odb.getAttribute ("system/settings/globalTheme");
											css = context.odb.getAttribute ("system/themes/" + theme);
										css;
									%>">
		<script src="../lib/bootstrap/dist/js/bootstrap.min.js"></script>
		<script src="../lib/bootbox/bootbox.js"></script>
		<link rel="stylesheet" href="../stylesheets/settings.css">
        <title>Actions</title>
    </head>
    <body>
    	<style>
			.logo-png {
				width: 20%;
			}
		</style>
		<div class="container-fluid">
			<div class="row vertical-align">
				<div class="col-xs-4">
					<h2><img class="image-responsive logo-png hidden-xs" src="../images/machttp-icon.png">Actions</h2>
				</div>
			</div>
			<div class="tab-content">
				<!-- Actions tab -->
				<div role="tabpanel" class="tab-pane fade in active" id="actions">
					<div class="row">
						<div class="col-xs-3">
							<h3>Actions <span class="glyphicon glyphicon-question-sign small" aria-hidden="true" onclick="DoHelp('actions')"></span></h3>
						</div>
					</div>
					<div class="row">
						<form class="form-horizontal">
							<div class="col-md-3 col-sm-8">
								<select id="actionsList" class="form-control objects" multiple size="20" onclick="DoActionClick ();">
								</select>
								<p />
								<button type="button" class="btn btn-default btn-md" onclick="CreateAction ();">
									<span class="glyphicon glyphicon-plus"></span>
									<span class="menu-button"></span>
								</button>
								<button type="button" class="btn btn-default btn-md" onclick="DeleteAction ();">
									<span class="glyphicon glyphicon-minus"></span>
									<span class="menu-button"></span>
								</button>
							</div>
							<div class="col-md-9 col-sm-8">
								<div class="form-group">
									<label for="actionName" class="col-sm-2 control-label">Action Name 
										<span class="glyphicon glyphicon-question-sign" aria-hidden="true" onclick="DoHelp('actionName')"></span>
									</label>
									<div class="col-sm-10">
										<input type="text" class="form-control" id="actionName" size="20">
									</div>
								</div>
					
								<div class="form-group">
									<label for="actionPath" class="col-sm-2 control-label">Action Path
										<span class="glyphicon glyphicon-question-sign" aria-hidden="true" onclick="DoHelp('actionPath')"></span>
									</label>
									<div class="col-sm-10">
										<input type="text" class="form-control" id="actionPath" size="60">
									</div>
								</div>
										
								<div class="form-group">
									<label for="actionScript" class="col-sm-2 control-label">Action Script
										<span class="glyphicon glyphicon-question-sign" aria-hidden="true" onclick="DoHelp('actionScript')"></span>
									</label>
									<div class="col-sm-8">
										<input type="text" class="form-control" id="actionScript" size="60">
									</div>
									<div class="col-sm-2 electron-only">
										<a type="submit" class="btn btn-default" onclick="SelectFile('actionScript');">
											Select...
										</a>
									</div>
								</div>
										
								<div class="form-group">
									<div class="col-sm-2">&nbsp;</div>
									<div class="col-sm-10">
										<button type="button" class="btn btn-default" id="saveButton" onclick="SaveAction ();">
											Save
										</button>
									</div>
								</div>					
							</div>
						</form>
					</div>
				</div>
			</div>
		</div>
		<script>
	//--------------------------------------------------
	
			var port = window.location.port;
       		var serviceURL = "/_static/admin/actions.jhtml";
       		
       		if (location.search !== undefined && location.search != "" && location.search != null)
       			serviceURL += (location.search + "&");
       		else
       			serviceURL += "?";
       		serviceURL += "cgi=1";
       		
			var helpText = {
				'actionName' : 'The user-friendly name of the action',
				'actionPath' : 'The path portion of the URL to be handled by the action (e.g., /myaction )',
				'actionScript' : 'The full path to the script (JCGI) file implementing the action (e.g., /Users/mrwheat/jcgi/myaction.jcgi )',
				'actions'	: 'Actions are used to implement custom URL handlers. They are identical to Express.js route handlers.' +
							  'Click the "+" to begin creating a new action, or select an existing one and hit "-" to delete it.',
				'ENDOFLIST' : ''
				};
		
			var ipcRenderer = null;
//			var globalSettings = {};
			
			if (isElectron) {
				ipcRenderer = nodeRequire('electron').ipcRenderer;

				ipcRenderer.on('do-command', function(event, arg) {
					HandleResults (arg);
				});
			}
			
 	//--------------------------------------------------
	
      		function logmsg (msg) {
				console.log (msg);
//       			var cons = $("#console");
//       			cons.append (msg + "<br />\n");
//       			cons.scrollTop (cons.prop('scrollHeight'));
//       			return false;
       		}
       		
	//--------------------------------------------------
	
			function EnableButton (name, isEnabled) {
				if (isEnabled) {
					$(name).removeAttr("disabled");
				}
				else {
					$(name).attr("disabled", "disabled");
				}
			}
			
	//--------------------------------------------------
	
			function EnableField (name, isEnabled) {
				EnableButton (name, isEnabled);
				if (!isEnabled) {
					$(name).val("");
				}
			}
			
	//--------------------------------------------------
	
			function HandleSelectFolder (args) {
				console.log ("folder args: " + JSON.stringify (args));
				var field = $("#" + args.which);
				field.val ( args.files );
			}
			
	//--------------------------------------------------
	
			function HandleResults (arg) {
				switch (arg.command) {
					case "select-actions-file":
						HandleSelectFolder (arg.msg);
						break;
						
					case "msg":
						logmsg ("Message from server: " + arg.msg);
						break;
											
					default:
						console.log ("command not found");
				}
			}
			
	//--------------------------------------------------
	
			function ServerCommand (cmd, args) {
				if (isElectron) {
					ipcRenderer.send('do-command', {'cmd': cmd, 'args': args});
				}
				else {
					switch (cmd) {
						case 'server-alert':
							bootbox.alert (args.msg);
							break;
							
						case 'open-in-browser':
							window.open (args, '_blank');
							break;
					}
				}
				return false;
			}

	//--------------------------------------------------
	
			function DoHelp (which) {
				try {
					var bb = bootbox.alert (helpText [which]);
					bb.find(".btn-primary").removeClass("btn-primary")
				}
				catch (err) {
				}
				return false;
			}
			
	//--------------------------------------------------
	
			function OpenInBrowser (url) {
				ServerCommand ("open-in-browser", url);
				return false;
			}
			
	//--------------------------------------------------
	
			function ProcessResponse (data) {
				logmsg ("ProcessResponse: " + JSON.stringify (data));
				
				switch (data.command) {
					case "listactions":
						$('#actionsList').empty();
						for (var i=0; i<data.args.length; i++) {
							$('#actionsList').append('<option>'+data.args[i]+'</option>');
						}
						break;
						
					case "get1action":
						$('#actionName').val(data.args.name);
						$('#actionPath').val(data.args.path);
						$('#actionScript').val(data.args.script);
						break;
						
					case "set1action":
						ListActions();
						break;
						
					case "delete1action":
						ListActions();
						break;
					
					default:
						break;
				}
			}
			
	//--------------------------------------------------
	
			function SendCmd (cmd, vargs) {
				logmsg ("SendCmd " + cmd);
				var json = {
						"command" : cmd,
						"args" : vargs
					};

				try {
					$.ajax ({
						type: "POST",
						url: serviceURL, 
						data: JSON.stringify(json), 
						contentType: "application/json",
						dataType: "json",
						success: function (data, status) {
							logmsg ("SendCmd result: " + status + ": " + JSON.stringify(data));
							ProcessResponse (data);
						}
					});
						
				}
				catch (err) {
					logmsg ("SendCmd Err: " + err);
				}				
			}
			
	//--------------------------------------------------
	
			function ServerAlert (msg) {
				return ServerCommand ("server-alert", {'msg': msg, 'parent':'settings'});
			}
		
	//--------------------------------------------------
			
			function LoadForm (name, path, script) {
				logmsg ("LoadForm " + name);
				$("#actionName").val (name);
				$("#actionPath").val (path);
				$("#actionScript").val (script);
			}
	
	//--------------------------------------------------
	//--------------------------------------------------
	//--------------------------------------------------
	
			function ListActions () {
				logmsg ("ListActions");
				//call web service
				SendCmd ("listactions", null);
			}
			
	//--------------------------------------------------
	
			function Get1Action (name) {
				logmsg ("Get1Action " + name);
				//call web service
				SendCmd ("get1action", name);
			}
			
	//--------------------------------------------------
	
			function Set1Action (name, path, script) {
				logmsg ("Set1Action " + name + ": " + path);
				//call web service
				SendCmd ("set1action", {'name': name, 'path': path, 'script': script});
			}
			
	//--------------------------------------------------
			
			function Delete1Action (name) {
				logmsg ("Delete1Action");
				EnableForm (false);
				//call web service
				SendCmd ("delete1action", name);
			}
				
	//--------------------------------------------------
	//--------------------------------------------------
	//--------------------------------------------------
			// actions select
			function DoActionClick () {
				logmsg ("DoActionClick");
				//get the selected action
				var selected = $("#actionsList option:selected").text();
				Get1Action (selected); //fetch the action and stick in form
				EnableForm (true);
				return false;
			}
			
	//--------------------------------------------------
			// + button
			function CreateAction () {
				logmsg ("CreateAction");
				//set form fields to empty
				LoadForm ("", "");
				EnableForm (true);
				return false;
			}
	
	//--------------------------------------------------
			// - button
			function DeleteAction () {
				logmsg ("DeleteAction");
				//get selected action from list
				var selected = $("#actionsList option:selected").text();
				Delete1Action (selected);
				//set form fields to empty
				LoadForm ("", "");
				EnableForm (false);
				ListActions ();
				return false;
			}
	
	//--------------------------------------------------
			// save button
			function SaveAction () {
				logmsg ("SaveAction");
				//clean up action name
				var action = $("#actionName").val().replace ("/","_");
				Set1Action (action, $("#actionPath").val(), $("#actionScript").val());
				EnableForm (false);
				return false;
			}
	
	//--------------------------------------------------
			
			function EnableForm (enabled) {
				logmsg ("EnableForm " + enabled);
				EnableField ("#actionName", enabled);
				EnableField ("#actionPath", enabled);
				EnableField ("#actionScript", enabled);
				EnableButton ("#saveButton", enabled);
			}
			
	//--------------------------------------------------
	
			function SelectFile (fileName) {
				ServerCommand ('select-actions-file', fileName);
				return false;
			}
			
	//--------------------------------------------------
	
			$(document).ready (function () {
				if (isElectron) {
					$('.electron-only').show();
				}
				else {
					$('.electron-only').hide();
				}
				
				EnableForm (false);
				ListActions ();
			});
		</script>
    </body>
</html>